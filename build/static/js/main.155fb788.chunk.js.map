{"version":3,"sources":["components/searchBar/SearchBar.js","components/Profile/Profile.js","components/ProfileList/ProfileList.js","utils/fetchProfile.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","term","handleSearch","Fragment","type","class","placeholder","onChange","Profile","record","index","FirstName","LastName","Gender","PhoneNumber","UserName","Email","PaymentMethod","CreditCardNumber","CreditCardType","URL","MacAddress","LastLogin","Longitude","Latitude","DomainName","ProfileList","result","_filterUpdated","length","className","Ellipsis","color","size","rows","onFilterUpdate","filterkey","casesensitive","showsearch","map","i","url","a","fetch","then","response","json","jsonResponse","records","profiles","App","useState","setProfiles","searchTerm","selected","setSelected","perPage","setPerPage","searchResult","setSearchResult","useEffect","fetchRecords","catch","err","Error","handleResult","e","target","value","console","log","filter","obj","Object","keys","some","key","String","toLowerCase","includes","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","onPageChange","data","containerClassName","subContainerClassName","activeClassName","slice","newData","filtersObject","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.155fb788.chunk.js","sourcesContent":["import React from 'react'\n\nexport function SearchBar({term,handleSearch}){\n\n\n    return (\n\n        <React.Fragment>\n     \n        <input type=\"text\"  class=\"form-control\" placeholder=\"Search\" onChange={handleSearch} />\n        \n        </React.Fragment>\n        )\n\n\n\n\n}","import \"./Profile.css\"\n\nexport function Profile({record,index}){\n\n\n    return (\n        <tr>\n        <td>{index+1}</td>\n        <td>{record.FirstName}</td>\n        <td> {record.LastName}</td>\n        <td> {record.Gender}</td>\n        <td> {record.PhoneNumber}</td>\n        <td>{record.UserName}</td>\n        <td> {record.Email}</td>\n        <td>{record.PaymentMethod}</td>\n        <td>{record.CreditCardNumber}</td>\n        <td>{record.CreditCardType}</td>\n        <td>{record.URL}</td>\n        <td> {record.MacAddress}</td>\n        <td>{record.LastLogin}</td>\n        <td>{record.Longitude} {record.Latitude} </td>\n        <td> {record.DomainName}</td>\n        </tr>\n    )\n}\n","import { useState,useEffect } from 'react';\nimport { Profile } from '../Profile/Profile';\nimport { Ellipsis } from 'react-css-spinners';\nimport Table  from 'react-bootstrap/Table';\nimport  TableFilter  from 'react-table-filter';\n\n\nimport './ProfileList.css'\nexport function ProfileList({result,_filterUpdated}){\n\n        if(result.length===0)return(\n            <div className=\"spinner\">\n            <Ellipsis color=\"#ffdf00\" size={150} />\n            </div>\n            ) \n            \n        \n        return (\n            \n            <table class=\"styled-table\">\n            <caption>Profile Information</caption> \n            <thead>\n            <TableFilter rows={result}\n            onFilterUpdate={_filterUpdated} >\n            <th>No</th>\n            <th  key={\"FirstName\"}  filterkey=\"FirstName\" className=\"cell\" casesensitive={'true'} showsearch={'true'}>FirstName</th>\n            <th  key={\"LastName\"} filterkey=\"LastName\" className=\"cell\" casesensitive={'true'} showsearch={'true'}>LastName</th>\n            <th  key={\"Gender\"} filterkey=\"Gender\" className=\"cell\" casesensitive={'true'} showsearch={'true'}>Gender</th>\n            <th>PhoneNumber</th>\n            <th>UserName</th>\n            <th>Email</th>\n            <th >PaymentMethod</th>\n            <th >CC-No</th>\n            <th >CC  Type</th>\n            <th >Url</th>\n            <th>MacAddress</th>\n            <th>LastLogin</th>\n            <th>Location</th>\n            <th>DomainName</th>\n            </TableFilter>\n            </thead>\n            <tbody>\n            {result.map((record,i)=><Profile key={i} index={i} record={record}/>)}\n            </tbody>\n            </table>\n            \n            \n            )\n            \n            \n        }","export async function  fetchRecords(url){  \n    return fetch(url).then(response=>response.json()).then(jsonResponse=>jsonResponse.records.profiles)\n\n}","import './App.css'\nimport React, {createContext, memo,useEffect, useState,useMemo,useCallback, useLayoutEffect } from 'react'\nimport {SearchBar } from \"../searchBar/SearchBar\";\nimport {ProfileList } from  \"../ProfileList/ProfileList\"\nimport { fetchRecords } from \"../../utils/fetchProfile\"\nimport ReactPaginate from 'react-paginate';\n\n\n\nimport 'react-table-filter/lib/styles.css';\n\nexport default function App(){\n   \n    const [profiles,setProfiles] = useState([]);\n    const [searchTerm] = useState(\"\");\n     const [selected,setSelected] = useState(0);\n    const [perPage,setPerPage] = useState(20)\n    const [searchResult,setSearchResult] = useState([])\n\n    useEffect(()=>{\n        const url=\"http://api.enye.tech/v1/challenge/records\";\n        fetchRecords(url).then((profiles)=>\n        setProfiles([...profiles])).catch(err=>{throw new Error(err)})\n       \n    }\n    ,[])\n\n\n    const handlePageClick=(data)=>{\n        if (data.selected === 0){\n            return;\n        };\n        setSelected(()=>data.selected*20)\n        setPerPage((selected)=>selected+20)\n    }\n\n    const handleSearch=(e) =>{\n        const searchTerm = e.target.value;\n        if(searchTerm){\n            console.log(searchTerm)\n            let result= profiles.filter(obj => Object.keys(obj).some(key => String(obj[key]).toLowerCase().includes(searchTerm.toLowerCase())));\n                console.log(result)\n                setSearchResult(()=>result) \n        }\n    }\n\n    const _filterUpdated = (newData,filtersObject)=>{\n        setSearchResult(()=>newData)\n    }\n    let handleResult= searchResult.length !== 0 ? searchResult:profiles\n  \n        return   (\n            <React.Fragment>\n            <SearchBar term={searchTerm} handleSearch={handleSearch} />\n            <ReactPaginate \n            previousLabel={\"previous\"}  \n            nextLabel={\"next\"}\n             breakLabel={\"...\"}\n              breakClassName={\"break-me\"}\n               pageCount={handleResult.length/20} \n                onPageChange={handlePageClick }\n                containerClassName={'pagination'}\n                subContainerClassName={'pages pagination'}\n                activeClassName={'active'}\n                />\n            <ProfileList result={handleResult.slice(selected,perPage)} _filterUpdated={_filterUpdated}/>\n         \n            </React.Fragment> )\n\n               \n    \n    \n        \n\n        \n    }","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/fontawesome.min.css'\n\n\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}