{"version":3,"sources":["components/searchBar/SearchBar.js","components/Profile/Profile.js","components/ProfileList/ProfileList.js","utils/fetchProfile.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","term","handleSearch","Fragment","type","class","placeholder","onChange","Profile","record","index","FirstName","LastName","Gender","PhoneNumber","UserName","Email","PaymentMethod","CreditCardNumber","CreditCardType","URL","MacAddress","LastLogin","Longitude","Latitude","DomainName","ProfileList","result","_filterUpdated","length","className","Ellipsis","color","size","rows","onFilterUpdate","filterkey","casesensitive","showsearch","map","i","url","a","fetch","then","response","json","jsonResponse","records","profiles","App","useState","setProfiles","searchTerm","selected","setSelected","perPage","setPerPage","searchResult","setSearchResult","useEffect","fetchRecords","catch","err","Error","handleResult","e","target","value","console","log","filter","obj","Object","keys","some","key","String","toLowerCase","includes","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","onPageChange","data","containerClassName","subContainerClassName","activeClassName","slice","newData","filtersObject","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcdba016.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function SearchBar({ term, handleSearch }) {\n  return (\n    <React.Fragment>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"Search\"\n        onChange={handleSearch}\n      />\n    </React.Fragment>\n  );\n}\n","import \"./Profile.css\";\n\nexport function Profile({ record, index }) {\n  return (\n    <tr>\n      <td>{index + 1}</td>\n      <td>{record.FirstName}</td>\n      <td> {record.LastName}</td>\n      <td> {record.Gender}</td>\n      <td> {record.PhoneNumber}</td>\n      <td>{record.UserName}</td>\n      <td> {record.Email}</td>\n      <td>{record.PaymentMethod}</td>\n      <td>{record.CreditCardNumber}</td>\n      <td>{record.CreditCardType}</td>\n      <td>{record.URL}</td>\n      <td> {record.MacAddress}</td>\n      <td>{record.LastLogin}</td>\n      <td>\n        {record.Longitude} {record.Latitude}{\" \"}\n      </td>\n      <td> {record.DomainName}</td>\n    </tr>\n  );\n}\n","import { Profile } from \"../Profile/Profile\";\nimport { Ellipsis } from \"react-css-spinners\";\nimport TableFilter from \"react-table-filter\";\n\nimport \"./ProfileList.css\";\nexport function ProfileList({ result, _filterUpdated }) {\n  if (result.length === 0)\n    return (\n      <div className=\"spinner\">\n        <Ellipsis color=\"#ffdf00\" size={150} />\n      </div>\n    );\n\n  return (\n    <table class=\"styled-table\">\n      <caption>Profile Information</caption>\n      <thead>\n        <TableFilter rows={result} onFilterUpdate={_filterUpdated}>\n          <th>No</th>\n          <th\n            key={\"FirstName\"}\n            filterkey=\"FirstName\"\n            className=\"cell\"\n            casesensitive={\"true\"}\n            showsearch={\"true\"}\n          >\n            FirstName\n          </th>\n          <th\n            key={\"LastName\"}\n            filterkey=\"LastName\"\n            className=\"cell\"\n            casesensitive={\"true\"}\n            showsearch={\"true\"}\n          >\n            LastName\n          </th>\n          <th\n            key={\"Gender\"}\n            filterkey=\"Gender\"\n            className=\"cell\"\n            casesensitive={\"true\"}\n            showsearch={\"true\"}\n          >\n            Gender\n          </th>\n          <th>PhoneNumber</th>\n          <th>UserName</th>\n          <th>Email</th>\n          <th>PaymentMethod</th>\n          <th>CC-No</th>\n          <th>CC Type</th>\n          <th>Url</th>\n          <th>MacAddress</th>\n          <th>LastLogin</th>\n          <th>Location</th>\n          <th>DomainName</th>\n        </TableFilter>\n      </thead>\n      <tbody>\n        {result.map((record, i) => (\n          <Profile key={i} index={i} record={record} />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","export async function fetchRecords(url) {\n  return fetch(url)\n    .then((response) => response.json())\n    .then((jsonResponse) => jsonResponse.records.profiles);\n}\n","import \"./App.css\";\nimport React, {\n  useEffect,\n  useState,\n\n} from \"react\";\nimport { SearchBar } from \"../searchBar/SearchBar\";\nimport { ProfileList } from \"../ProfileList/ProfileList\";\nimport { fetchRecords } from \"../../utils/fetchProfile\";\nimport ReactPaginate from \"react-paginate\";\n\nimport \"react-table-filter/lib/styles.css\";\n\nexport default function App() {\n  const [profiles, setProfiles] = useState([]);\n  const [searchTerm] = useState(\"\");\n  const [selected, setSelected] = useState(0);\n  const [perPage, setPerPage] = useState(20);\n  const [searchResult, setSearchResult] = useState([]);\n\n  useEffect(() => {\n    const url = \"https://api.enye.tech/v1/challenge/records\";\n    fetchRecords(url)\n      .then((profiles) => setProfiles([...profiles]))\n      .catch((err) => {\n        throw new Error(err);\n      });\n  }, []);\n\n  const handlePageClick = (data) => {\n    if (data.selected === 0) {\n      return;\n    }\n    setSelected(() => data.selected * 20);\n    setPerPage((selected) => selected + 20);\n  };\n\n  const handleSearch = (e) => {\n    const searchTerm = e.target.value;\n    if (searchTerm) {\n      console.log(searchTerm);\n      let result = profiles.filter((obj) =>\n        Object.keys(obj).some((key) =>\n          String(obj[key]).toLowerCase().includes(searchTerm.toLowerCase())\n        )\n      );\n      console.log(result);\n      setSearchResult(() => result);\n    }\n  };\n\n  const _filterUpdated = (newData, filtersObject) => {\n    setSearchResult(() => newData);\n  };\n  let handleResult = searchResult.length !== 0 ? searchResult : profiles;\n\n  return (\n    <React.Fragment>\n      <SearchBar term={searchTerm} handleSearch={handleSearch} />\n      <ReactPaginate\n        previousLabel={\"previous\"}\n        nextLabel={\"next\"}\n        breakLabel={\"...\"}\n        breakClassName={\"break-me\"}\n        pageCount={handleResult.length / 20}\n        onPageChange={handlePageClick}\n        containerClassName={\"pagination\"}\n        subContainerClassName={\"pages pagination\"}\n        activeClassName={\"active\"}\n      />\n      <ProfileList\n        result={handleResult.slice(selected, perPage)}\n        _filterUpdated={_filterUpdated}\n      />\n    </React.Fragment>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}